link = https://practice.geeksforgeeks.org/problems/number-of-ways-to-arrive-at-destination/1

class Solution {
  public:
    int countPaths(int n, vector<vector<int>>& roads) {
        vector<pair<int,int>>adj[n];
        for(auto it:roads){
            adj[it[0]].push_back({it[1],it[2]});
            adj[it[1]].push_back({it[0],it[2]});
        }
        vector<int>dist(n,1e9);
        vector<int>ways(n,0);
        ways[0] = 1;
        dist[0] =0;
        
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        
        int mod = (int)(1e9+7);
        pq.push({0,0});
        while(!pq.empty()){
            int distance = pq.top().first;
            int node = pq.top().second;
            pq.pop();
            
            
            for(auto it:adj[node]){
                int adjnode = it.first;
                int weight = it.second;
                
                if(distance + weight < dist[adjnode]){
                    dist[adjnode] = distance + weight;
                    pq.push({dist[adjnode],adjnode});
                    ways[adjnode] = ways[node];
                }
                else if( distance + weight == dist[adjnode]){
                    ways[adjnode] = (ways[adjnode] + ways[node])%mod;
                }
            }
        }
        return (ways[n-1])%mod;
    }
};
