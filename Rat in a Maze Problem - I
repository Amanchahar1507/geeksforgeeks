class Solution{
    public:
    
    void solve(int i,int j,vector<vector<int>>&m, int n, vector<string>&ans, vector<vector<int>>&visited,
    string moved ){
     
     if(i==n-1 && j==n-1){
         ans.push_back(moved);
         return;
     }   
     //upward
     if(i-1>=0 && !visited[i-1][j] && m[i-1][j]==1){
         visited[i][j]= 1;
         solve(i-1,j,m,n,ans,visited,moved+'U');
         visited[i][j] = 0;
     }
     //downward
     if(i+1<n && !visited[i+1][j] && m[i+1][j] ==1){
         visited[i][j] = 1;
         solve(i+1,j,m,n,ans,visited,moved+'D');
         visited[i][j] = 0;
     }
     //left
     if(j-1>=0 && !visited[i][j-1] && m[i][j-1] ==1){
         visited[i][j] = 1;
         solve(i,j-1,m,n,ans,visited,moved+'L');
         visited[i][j] = 0;
     }
     //right
     if(j+1<n && !visited[i][j+1] && m[i][j+1] == 1){
         visited[i][j] = 1;
         solve(i,j+1,m,n,ans,visited,moved+'R');
         visited[i][j] = 0;
     }
     
    }
    
    vector<string> findPath(vector<vector<int>> &m, int n) {
       vector<vector<int>>visited(n,vector<int>(n,0));
       vector<string>ans;
       if(m[0][0] == 1)
       {
          solve(0,0,m,n,ans,visited,"");
       }
       return ans;
        // Your code goes here
    }
};
