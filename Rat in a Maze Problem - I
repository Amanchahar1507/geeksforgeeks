link = https://practice.geeksforgeeks.org/problems/rat-in-a-maze-problem/1?page=1&category[]=Recursion&category[]=Backtracking&sortBy=submissions

class Solution{
    public:
    
    void solve(int i,int j,vector<vector<int>>&m, int n, vector<string>&ans, vector<vector<int>>&visited,
    string moved ){
     
     if(i==n-1 && j==n-1){
         ans.push_back(moved);
         return;
     }   
     //upward
     if(i-1>=0 && !visited[i-1][j] && m[i-1][j]==1){
         visited[i][j]= 1;
         solve(i-1,j,m,n,ans,visited,moved+'U');
         visited[i][j] = 0;
     }
     //downward
     if(i+1<n && !visited[i+1][j] && m[i+1][j] ==1){
         visited[i][j] = 1;
         solve(i+1,j,m,n,ans,visited,moved+'D');
         visited[i][j] = 0;
     }
     //left
     if(j-1>=0 && !visited[i][j-1] && m[i][j-1] ==1){
         visited[i][j] = 1;
         solve(i,j-1,m,n,ans,visited,moved+'L');
         visited[i][j] = 0;
     }
     //right
     if(j+1<n && !visited[i][j+1] && m[i][j+1] == 1){
         visited[i][j] = 1;
         solve(i,j+1,m,n,ans,visited,moved+'R');
         visited[i][j] = 0;
     }
     
    }
    
    vector<string> findPath(vector<vector<int>> &m, int n) {
       vector<vector<int>>visited(n,vector<int>(n,0));
       vector<string>ans;
       if(m[0][0] == 1)
       {
          solve(0,0,m,n,ans,visited,"");
       }
       return ans;
        // Your code goes here
    }
    
     bool isSafe(int newx,int newy,int n,vector<vector<int>> visited,vector<vector<int>> &m)
   {
       if((newx>=0 && newx<n) && (newy>=0 &&newy<n) && visited[newx][newy]==0 && m[newx][newy]==1)
       {
           return true;
       }
       else
       {
           return false;
       }
   }
void solve(vector<vector<int>> &m,int n,vector<string>& ans,int x,int y,vector<vector<int>> visited,string path)
{
   //base case
   if(x==n-1 && y==n-1)
   {
       ans.push_back(path);
       return;
   }
   visited[x][y]=1;
   
   //choices D/L/R/U
   
   //down
   int newx=x+1;
   int newy=y;
   if(isSafe(newx,newy,n,visited,m))
   {
       path.push_back('D');
       solve(m,n,ans,newx,newy,visited,path);
       path.pop_back();
   }

   
   //left
    newx=x;
    newy=y-1;
   if(isSafe(newx,newy,n,visited,m))
   {
       path.push_back('L');
       solve(m,n,ans,newx,newy,visited,path);
       path.pop_back();
   }

   
   //Right
   newx=x;
    newy=y+1;
 if(isSafe(newx,newy,n,visited,m))
   {
       path.push_back('R');
       solve(m,n,ans,newx,newy,visited,path);
       path.pop_back();
   }
   
   //up
   newx=x-1;
    newy=y;
   if(isSafe(newx,newy,n,visited,m))
   {
       path.push_back('U');
       solve(m,n,ans,newx,newy,visited,path);
       path.pop_back();
   }
   
visited[x][y]=0;
}
public:
   vector<string> findPath(vector<vector<int>> &m, int n) {
       vector<string> ans;
       if(m[0][0]==0)
       {
           return ans;
       }
       
       
       int srcx=0,srcy=0;
       vector<vector<int>> visited=m;
       for(int i=0;i<n;i++)
       {
           for(int j=0;j<n;j++)
           {
               visited[i][j]=0;
           }
       }
       string path="";
       solve(m,n,ans,srcx,srcy,visited,path);
       sort(ans.begin(),ans.end());
       return ans;
       
   }
};
