link = https://practice.geeksforgeeks.org/problems/implementing-dijkstra-set-1-adjacency-matrix/1


class Solution
{
	public:
	//Function to find the shortest distance of all the vertices
    //from the source vertex S.
    vector <int> dijkstra(int V, vector<vector<int>> adj[], int S)
    {
        //SET
        
        set<pair<int,int>>st;
        vector<int>dist(V,1e9);
        
        //for(int i=0;i<V;i++) dist[i] = 1e9;
        
        st.insert({0,S});
        dist[S] =0;
        
        while(!st.empty()){
            auto it = *(st.begin());
            int distance = it.first;
            int node = it.second;
            st.erase(it);
            
            for(auto it: adj[node]){
                int weight = it[1];
                int edge = it[0];
                
                if(distance + weight < dist[edge]){
                    
                    if(dist[edge] != 1e9){
                        st.erase({dist[edge],edge});
                    }
                    dist[edge] = distance + weight;
                    st.insert({dist[edge],edge});
                }
            }
        }
        return dist;
        
        //PRORITY_QUEUE
        
        // priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        
        // vector<int>dist(V);
        // for(int i=0;i<V;i++) dist[i] = 1e9;
        
        // dist[S] =0;
        // pq.push({0,S});
        
        // while(!pq.empty()){
        //     int distance = pq.top().first;
        //     int node = pq.top().second;
        //     pq.pop();
            
        //     for(auto it:adj[node]){
        //         int weight = it[1];
        //         int edge = it[0];
                
        //         if(distance + weight < dist[edge]){
        //             dist[edge] = distance + weight;
        //             pq.push({dist[edge],edge});
        //         }
        //     }
            
        // }
        // return dist;
    }
};
