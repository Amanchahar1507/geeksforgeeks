link = https://practice.geeksforgeeks.org/problems/burning-tree/1

class Solution {
  public:
  Node*createRoot(Node*root, map<Node*,Node*> &NodeToParent, int target){
      Node*result = NULL;   
      queue<Node*>q;
      q.push(root);
      
    NodeToParent[root] = NULL;
      while(!q.empty()){
          Node*front = q.front();
          q.pop();
          if(front->data==target){
              result = front;
          }
          if(front->left!=NULL){
              NodeToParent[front->left]=front;
              q.push(front->left);
          }
          if(front->right!=NULL){
              NodeToParent[front->right] = front;
              q.push(front->right);
          }
          
      }
      return result;
  }
  int BurnTree(Node*result,map<Node*,Node*>&NodeToParent){
     int ans =0;
     queue<Node*>q;
     map<Node*,bool>visited;
          q.push(result);
     visited[result]=1;

     while(!q.empty()){
         
         int size = q.size();
         bool flag = 0;
         for(int i=0;i<size;i++){
             Node*temp = q.front();
             q.pop();
             if(temp->left!=NULL && !visited[temp->left]){
                 flag = 1;
                 q.push(temp->left);
                visited[temp->left] = 1;
                
             }
             
             if(temp->right!=NULL && !visited[temp->right]){
                 flag = 1;
                 q.push(temp->right);
                 visited[temp->right] = 1;
                 
             }
             if(NodeToParent[temp]!=NULL && !visited[NodeToParent[temp]]){
                 flag = 1;
                 q.push(NodeToParent[temp]);
                 visited[NodeToParent[temp]]=1;
                 
             }
         }
         
         if(flag == 1)
             ans++;
     }
     return ans;
      
  }
  
    int minTime(Node* root, int target) 
    {
        map<Node*,Node*>NodeToParent;
        
        Node*result = createRoot(root, NodeToParent,target);
        int ans = BurnTree(result,NodeToParent);
        return ans;
    }
};
