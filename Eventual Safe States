link = https://practice.geeksforgeeks.org/problems/eventual-safe-states/1

class Solution {
  public:
  
    bool dfs(int node, vector<int>adj[],int visited[],int pathvisited[],int check[]){
        visited[node] =1;
        pathvisited[node] =1;
        check[node]=0;
        
        for(auto it:adj[node]){
            if(!visited[it]){
                if(dfs(it,adj,visited,pathvisited,check)==true){
                    return true;
                    check[node] =0;
                }
            }
            else if(pathvisited[it]){
                return true;
                check[node] =0;
            }
        }
        
        check[node] =1;
        pathvisited[node] =0;
        return false;
    }
  
    vector<int> eventualSafeNodes(int V, vector<int> adj[]) {
        int visited[V] ={0};
        int pathvisited[V] = {0};
        
        int check[V] ={0};
        vector<int>safe;
        
        for(int i=0;i<V;i++){
            if(!visited[i]){
                dfs(i,adj,visited,pathvisited,check);
            }
        }
        
        for(int i=0;i<V;i++){
            if(check[i]==1){
                safe.push_back(i);
            }
        }
        return safe;
    }
};
