link = https://practice.geeksforgeeks.org/problems/topological-sort/1

class Solution
{
	public:
	//Function to return list containing vertices in Topological order. 
	
	
	//DFS
	
	void dfs(int node, vector<bool>&visited, stack<int>&s, vector<int>adj[]){
	    visited[node]  =1;
	    
	    for(auto neighbour:adj[node]){
	        if(!visited[neighbour]){
	            dfs(neighbour,visited,s,adj);
	        }
	    }
	    s.push(node);
	}
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
        vector<bool>visited(V);
        stack<int>s;
        for(int i=0;i<V;i++){
            if(!visited[i]){
                dfs(i,visited,s,adj);
            }
        }
        vector<int>ans;
        while(!s.empty()){
            ans.push_back(s.top());
            s.pop();
        }
        return ans;
        
	}
	
	
	//BFS KAHN's ALGORITHM
	
// 	vector<int> topoSort(int V, vector<int> adj[]) {
// 	    //indegree
// 	    vector<int> indegree(V);
       
//         for(int i=0;i<V;i++){
//         for(auto it : adj[i]){
//                 indegree[it]++;
//             }
//         }
	    
// 	    queue<int>q;
// 	    for(int i=0;i<V;i++){
// 	        if(indegree[i] ==0){
// 	            q.push(i);
// 	        }
// 	    }
	    
// 	    //do bfs
// 	    vector<int>ans;
// 	    while(!q.empty()){
// 	        int top = q.front();
// 	        q.pop();
	        
// 	        ans.push_back(top);
	        
// 	        for(auto neighbour:adj[top]){
// 	            indegree[neighbour]--;
// 	            if(indegree[neighbour] == 0){
// 	                q.push(neighbour);
// 	            }
// 	        }
// 	    }
// 	    return ans;
//	}
	
};
