link = https://practice.geeksforgeeks.org/problems/connecting-the-graph/1

class disjoint{
    public:
    vector<int>parent,size;
    
    disjoint(int n){
        parent.resize(n+1);
        size.resize(n+1);
        for(int i=0;i<n;i++){
            parent[i] =i;
            size[i] =1;
        }
    }
    
    int findupar(int node){
        if(node == parent[node]){
            return node;
        }
        return parent[node] = findupar(parent[node]);
    }
    
    void unionbysize(int u, int v){
        int ulp_u = findupar(u);
        int ulp_v = findupar(v);
        
        if(ulp_u == ulp_v) return;
        
        if(size[ulp_u] < size[ulp_v]){
            parent[ulp_u] = ulp_v;
            size[ulp_v] +=size[ulp_u];
        }
        
        else{
            parent[ulp_v] = ulp_u;
            size[ulp_u] +=size[ulp_v];
        }
    }
};

class Solution {
  public:
    int Solve(int n, vector<vector<int>>& edge) {
        disjoint ds(n);
        
        int extraedge =0;
        for(auto it:edge){
            int u = it[0];
            int v = it[1];
            
            if(ds.findupar(u) == ds.findupar(v)){
                extraedge++;
            }
            else{
                ds.unionbysize(u,v);
            }
        }
        int countnode =0;
        for(int i=0;i<n;i++){
            if(ds.parent[i]==i){
                countnode++;
            }
        }
        int ans = countnode-1;
        if(extraedge >=ans)
            return ans;
        return -1;
    }
};
