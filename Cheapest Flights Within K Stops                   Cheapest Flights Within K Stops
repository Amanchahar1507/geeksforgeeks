link = https://practice.geeksforgeeks.org/problems/cheapest-flights-within-k-stops/1

class Solution {
  public:
    int CheapestFLight(int n, vector<vector<int>>& flights, int src, int dst, int K)  {
        vector<pair<int,int>>adj[n];
        
        for(auto it:flights){
            adj[it[0]].push_back({it[1],it[2]});
        }
        
        queue<pair<int,pair<int,int>>>q;
        q.push({0,{src,0}});
        
        vector<int>dist(n,1e9);
        dist[src] =0;
        
        while(!q.empty()){
            int stops = q.front().first;
            int node = q.front().second.first;
            int weight = q.front().second.second;
            q.pop();
            
            if(stops > K) continue;
            
            for(auto it:adj[node]){
                int adjnode = it.first;
                int cost = it.second;
                
                if(cost + weight < dist[adjnode] && stops<=K){
                    dist[adjnode] = cost + weight;
                    q.push({stops+1,{adjnode,dist[adjnode]}});
                }
            }
        }
        if(dist[dst] == 1e9){
            return -1;
        }
        return dist[dst];
    }
};
