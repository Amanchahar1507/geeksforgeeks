link =https://practice.geeksforgeeks.org/problems/rotten-oranges2536/1

class Solution 
{
    public:
    //Function to find minimum time required to rot all oranges. 
    int orangesRotting(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        
        int visited[n][m];
        
        queue<pair<pair<int,int>,int>>q;
        int freshcount = 0;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==2){
                    q.push({{i,j},0});
                    visited[i][j] = 2;
                }
                else{
                    visited[i][j] = 0;
                }
                if(grid[i][j]==1) freshcount++;
            }
        }
        
        int tm = 0;
        int delrow[]  = {-1,0,1,0};
        int delcol[] = {0,-1,0,1};
        int count =0;
        while(!q.empty()){
            int row = q.front().first.first;
            int col = q.front().first.second;
            int t =  q.front().second;
            
            tm = max(tm,t);
            q.pop();
            for(int i=0;i<4;i++){
                int nerow = row + delrow[i];
                int necol = col + delcol[i];
                
                if(nerow>=0 && nerow<n && necol>=0 && necol<m && 
                grid[nerow][necol]==1 && visited[nerow][necol]!=2){
                    q.push({{nerow,necol},t+1});
                    visited[nerow][necol] = 2;
                    count++;
                }
                
            }
            
        }
        if(count != freshcount) return -1;
        
        return tm;
    }
};
