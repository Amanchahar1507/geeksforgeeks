class Solution{
public:
    void OptNQueen(int col ,vector<vector<vector<int>>> &ans, vector<vector<int>> &board, int n, vector<int> &leftrow, vector<int> &upperdiog, vector<int> &lowerdiog){
       if(col == n){
           ans.push_back(board);
           return;
       }
       for(int row=0; row<n; row++){
           if(leftrow[row] == 0 && lowerdiog[row + col] == 0 && upperdiog[n-1 + col -row] == 0){
               board[row][col] = 1;
               leftrow[row] = 1;
               lowerdiog[row+col] = 1;
               upperdiog[n-1+col-row] = 1;
               OptNQueen(col+1, ans, board, n, leftrow, upperdiog, lowerdiog);
               board[row][col] = 0;
               leftrow[row] = 0;
               lowerdiog[row+col] = 0;
               upperdiog[n-1+col-row] = 0;
           }
       }
   }
   vector<vector<int>> nQueen(int n) {
       // code here
       vector<vector<vector<int>>> ans;
       vector<vector<int>> board(n, vector<int> (n, 0));
       vector<int> leftrow(n, 0), upperdiog(2*n-1, 0), lowerdiog(2*n-1, 0);
       
       OptNQueen(0, ans, board, n, leftrow, upperdiog, lowerdiog);
   
       vector<vector<int>> res;
   
       for(int i=0; i<ans.size(); i++){
           vector<int> sol;
           for(int j=0; j<n; j++){
               for(int k=0; k<n; k++){
                   if(ans[i][j][k] == 1){
                       sol.push_back(k+1);
                   }
               }
           }
           res.push_back(sol);
       }
       sort(res.begin(), res.end());
       return res;
        // code here
    }
};
